name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    name: Go Test & Coverage
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        go: [ '1.22.x' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}-

      - name: Go Vet
        run: go vet ./...

      - name: Build
        run: go build -o syncdir.exe

      # --- Test + capture logs per OS ---
      - name: Test with coverage (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -e
          go clean -testcache
          go test ./... -coverprofile=coverage.out -count=1 -failfast -v 2>&1 | tee test.log

      - name: Test with coverage (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          go clean -testcache
          go test ./... -coverprofile=coverage.out -count=1 -failfast -v *>&1 | Tee-Object -FilePath test.log

      - name: Coverage (functions)
        if: always()
        run: go tool cover -func=coverage.out || true

      - name: Coverage HTML
        if: always()
        run: go tool cover -html=coverage.out -o coverage.html || true

      - name: Upload test logs & coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ runner.os }}
          path: |
            test.log
            coverage.out
            coverage.html
       - name: Go Fmt check
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "gofmt needed:"
            gofmt -l .
            exit 1
          fi